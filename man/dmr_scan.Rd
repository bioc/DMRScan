% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DMRScan.R
\name{dmr_scan}
\alias{dmr_scan}
\title{DMR Scan function}
\usage{
dmr_scan(obs, k_grid, t_grid = NULL, ...)
}
\arguments{
\item{obs}{A sequence of test statistics for each CpG}

\item{k_grid}{A sequence of window sizes for the sliding window, must be an integer}

\item{t_grid}{Optional argument with corresponding cut-off for each window. Will be estimated if not supplied.}

\item{...}{Optional arguments to be pased to estimate_t_grid(), if no grid is specified.}
}
\value{
A list of Differentially Methylated Regions (DMRs). Returns NA if no DMRs were found.
}
\description{
This function search for DMRs given a orded sequence of test statistics
}
\examples{
data(DMRScan.methylationData) ## Load methylation data from chromosome 22
data(DMRScan.phenotypes) ## Load phenotype (end-point for methylation data)

## Test for an association between phenotype and Methylation
test.statistics <- apply(DMRScan.methylationData,1,function(x,y)summary(glm(y ~ x, family = binomial(link = "logit")))$coefficients[2,3], y = DMRScan.phenotypes)
## Set chromosomal position to each test-statistic
pos<- data.frame(matrix(as.integer(unlist(strsplit(names(test.statistics), split="chr|[.]"))), ncol = 3, byrow = TRUE))[,-1] 
## Set clustering features 
min.cpg <- 4  ## Minimum number of CpGs in a tested cluster
## Maxium distance (in base-pairs) within a cluster 
## before it is broken up into two seperate cluster 
max.gap <- 750  

window.sizes <- 3:7 ## Number of CpGs in the sliding windows, can be either a single number or a sequence of window sizes
n.CpG        <- nrow(DMRScan.methylationData) ## Number of CpGs to be tested

## Estimate the window threshold, based on the number of CpGs and window sizes
window.thresholds <- estimate_t_grid(k_grid = window.sizes, L = n.CpG, method = "zhang", mcmc = 10000)

## Identify all clusters, and generate a list for each cluster
regions <- make.cpg.regions(test_statistic = test.statistics, chr = pos[,1], pos = pos[,2], max.gap = max.gap, min.cpg = min.cpg)
## Run the sliding window
dmrscan.results   <- dmr_scan(obs = regions, k_grid = window.sizes, t_grid = window.thresholds)
## Print the result
print(dmrscan.results)


}
\keyword{DMRScan}

